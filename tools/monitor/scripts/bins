#!/usr/bin/env python
#  Copyright (c) 2016, David Hauweele <david@hauweele.net>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#   1. Redistributions of source code must retain the above copyright notice, this
#      list of conditions and the following disclaimer.
#   2. Redistributions in binary form must reproduce the above copyright notice,
#      this list of conditions and the following disclaimer in the documentation
#      and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
#  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import sys
import scipy
import numpy

import lib.utils

if len(sys.argv) not in (2, 3):
    print "usage: %s [#BINS] COLUMN" % (sys.argv[0],)
    print
    print "Construct a histogram from the specified column that fit into"
    print "the number of bins specified on the command line. The file is"
    print "taken from stdin. Note that this script also computes the sum,"
    print "average and standard deviation. Values are expected to be integer."
    print
    print "If there is only one argument, it is considered as the column"
    print "number, only stats are computed and displayed in a format that"
    print "is easier to parse."

    sys.exit(1)

if len(sys.argv) == 3:
    n_bins = lib.utils.try_int(sys.argv[1])
    column = lib.utils.try_int(sys.argv[2])
    stats_only = False
else:
    n_bins = 1 # We compute the bins but don't display them.
    column = lib.utils.try_int(sys.argv[1])
    stats_only = True

values = []
for line in sys.stdin:
    line = line.strip('\n')
    if line == "" or line[0] == '#':
        continue

    line = line.split(' ')

    try:
        values.append(lib.utils.try_int(line[column]))
    except IndexError:
        lib.utils.err(1, "invalid column")

average  = scipy.average(values)
stddev   = scipy.std(values)
ptile_5  = numpy.percentile(values, 5)
ptile_95 = numpy.percentile(values, 95)
v_sum    = sum(values)
v_min    = min(values)
v_max    = max(values)
delta        = v_max - v_min

if stats_only:
    print "average:%f" % (average,)
    print "stddev:%f" % (stddev,)
    print "5th:%d" % (ptile_5,)
    print "95th:%d" % (ptile_95,)
    print "sum:%d" % (v_sum,)
    print "min:%d" % (v_min,)
    print "max:%d" % (v_max,)
    print "delta:%d" % (delta,)
    sys.exit(0)

print "# ( %f +/- %f ) " % (average, stddev)
print "# 5th ptiles : %d" % (ptile_5,)
print "# 95th ptiles: %d" % (ptile_95,)
print "# sum: %d" % (v_sum,)
print "# min: %d" % (v_min,)
print "# max: %d" % (v_max,)
print "# delta: %d" % (delta,)
print "#"
print "# bin-left bin-right bin-center #occurence"

factor = float(delta) / n_bins

bins = {}
for v in values:
    b = int(round(v / factor))

    if b in bins:
        bins[b] += 1
    else:
        bins[b]  = 1

bin_keys = bins.keys()
bin_keys.sort()

for b in bin_keys:
    occur = bins[b]

    left   = b - .5
    right  = b + .5
    center = b

    left   *= factor
    right  *= factor
    center *= factor

    print "%f %f %f %d" % (left, right, center, occur)
