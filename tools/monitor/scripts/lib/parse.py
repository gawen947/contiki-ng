#  Copyright (c) 2016, David Hauweele <david@hauweele.net>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#   1. Redistributions of source code must retain the above copyright notice, this
#      list of conditions and the following disclaimer.
#   2. Redistributions in binary form must reproduce the above copyright notice,
#      this list of conditions and the following disclaimer in the documentation
#      and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
#  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import utils

# Parse events generated by the trace program in normal form.
# We do not parse the fields individually. That is we do not
# convert them from their string to a native format. Instead
# they are just stored into two dictionnaries (one for scopes
# and one for the event itself).
class Event(object):
    def __init__(self, event_str):
        self.parse(event_str)

    def parse(self, event_str):
        scope_event=event_str.split(':')

        if len(scope_event) != 2:
            utils.err(1, "cannot split scope and event part.")

        self.scope = self.assemble_in_dict(scope_event[0])
        self.event = self.assemble_in_dict(scope_event[1])

        if "EVENT" in self.scope:
            self.id = utils.try_int(self.scope["EVENT"])
        else:
            utils.err(1, "cannot find event ID")

    def assemble_in_dict(self, part):
        dic    = {}
        fields = part.split(' ')

        for field in fields:
            field_elements=field.split('=')

            if len(field_elements) != 2:
                utils.err(1, "cannot split field elements")

            name  = field_elements[0]
            value = field_elements[1]

            dic[name] = value

        return dic

# Parse a state event in its condensed notation, that is: CTX/ENT/STATE.
# The resulting object is left as string-typed.
class MonState(object):
    def __init__(self, line = None, ctx = None, ent = None, state = None):
        if line:
            mon_ids = line.split('/')
            if len(mon_ids) != 3:
                raise ValueError("invalid event description (should be CTX/ENT/STATE)")

            self.context, self.entity, self.state = (mon_ids[0], mon_ids[1], mon_ids[2])
        else:
            self.context, self.entity, self.state = (ctx, ent, state)

        self.context = self.context.strip('\n')
        self.entity  = self.entity.strip('\n')
        self.state   = self.state.strip('\n')

    def __eq__(self, o):
        return (o.context == self.context) and \
               (o.entity  == self.entity)  and \
               (o.state   == self.state)

    def __str__(self):
        return "%s/%s/%s" % (self.context, self.entity, self.state)
