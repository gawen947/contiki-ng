#!/usr/bin/env python
#  Copyright (c) 2016, David Hauweele <david@hauweele.net>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#   1. Redistributions of source code must retain the above copyright notice, this
#      list of conditions and the following disclaimer.
#   2. Redistributions in binary form must reproduce the above copyright notice,
#      this list of conditions and the following disclaimer in the documentation
#      and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
#  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import sys

import lib.parse
import lib.utils

if len(sys.argv) < 3:
    print "usage: %s EVENT_1 EVENT_2 EVENT_3 ..." % (sys.argv[0],)
    print
    print "Consider all given events as a path we have to go through"
    print "to do a specific action in the stack (such as 'shut radio off',"
    print "'send a packet', 'powercycle cycle'). This is known as an event"
    print "chain or path."
    print
    print "What this program do is for each chain (even incomplete), it list"
    print "the time passing through each event, and the increment in time"
    print "since the first event. This way we can see part of the chain that"
    print "takes more time."

    print "Event are specified should be MON_STATE events."
    print "They are specified in the form CTX/ENT/STATE."

    sys.exit(1)

# parse chain
chain=[]
for arg in sys.argv[1:]:
    try:
        event = lib.parse.MonState(arg)
    except ValueError:
        lib.utils.err(1, "invalid event description '%s'" % (arg,))
    chain.append(event)

idx      = 0 # current element in the chain
orig_cyc = 0 # first chain element ttime
orig_ms  = 0
last_cyc = 0 # last time
last_ms  = 0
for line in sys.stdin:
    event = lib.parse.Event(line)

    try:
        event_type   = event.event["EVENT_TYPE"]
    except KeyError:
        lib.utils.err(1, "invalid event")

    if event_type != "MON_STATE":
        continue

    try:
        node_ms      = lib.utils.try_float(event.scope["NODE_TIME_MS"])
        node_cyc     = lib.utils.try_int(event.scope["NODE_CYCLES"])
        mon_state_ev = lib.parse.MonState(ctx   = event.event["CTX"],
                                          ent   = event.event["ENT"],
                                          state = event.event["STATE"])
    except KeyError:
        lib.utils.err(1, "invalid event")

    if mon_state_ev == chain[0]:
        # start new chain
        orig_cyc = lib.utils.try_int(node_cyc)
        orig_ms  = lib.utils.try_float(node_ms)
        last_cyc = orig_cyc
        last_ms  = orig_ms
        idx = 0

    if mon_state_ev == chain[idx]:
        event_time_ms  = lib.utils.try_float(node_ms)
        event_time_cyc = lib.utils.try_int(node_cyc)
        event_id       = event.id

        delta = event_time_cyc - orig_cyc
        incre = event_time_cyc - last_cyc

        print "%s idx=%d %s (+%d / @%d )cyc." % (event_id, idx, str(mon_state_ev), incre, delta)

        last_cyc = event_time_cyc
        last_ms  = event_time_ms
        idx = (idx + 1) % len(chain)
